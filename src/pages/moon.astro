---
import Author from "../components/Author.astro";
import Canvas from "../components/Canvas.astro";
import Footer from "../components/Footer.astro";
import MainNavigation from "../components/MainNavigation.astro";
import Meta from "../components/Meta.astro";
import Layout from "../layouts/Layout.astro";
---

<script>
   import { useGlslCanvas } from "../webgl/renderer";
   import vertexShader from "../webgl/shaders/vertex.glsl";
   import fragmentShader from "../webgl/shaders/planet.fragment.glsl";
   import { addPlanetControls } from "../controls/planet.controls";
   import { addLightControls } from "../controls/light.controls";
   import { addMonitor } from "../controls/monitor.controls";
   import { addRotationControls } from "../controls/rotation.controls";
   import { loadTexture } from "../webgl/loaders/texture.loader";
   import { defaultUniforms } from "../webgl/settings/uniforms";
   import type { SamplerOptions } from "four";

   type TextureData = {
      path: string;
      width?: number;
      height?: number;
      options?: Partial<SamplerOptions>;
   };

   const textures: TextureData[] = [
      {
         path: "2k_moon.jpg",
         options: { minFilter: "linearMipmapLinear" },
      },
      {
         path: "4k_stars.jpg",
         width: 4096,
         height: 2048,
         options: { minFilter: "linearMipmapLinear" },
      },
   ];

   const [uPlanetColor, uStars] = await Promise.all(
      textures.map(({ path, width = 2048, height = 1024, options }) =>
         loadTexture(`/realtime-planet-shader/${path}`, width, height, options)
      )
   );

   const canvas = document.querySelector("canvas")!;

   const { uniforms } = useGlslCanvas(canvas, {
      vertex: vertexShader,
      fragment: fragmentShader,
      uniforms: {
         ...defaultUniforms,
         uAtmosphereColor: [1, 1, 1],
         uAtmosphereDensity: 0.05,
         uQuality: Math.min(window.devicePixelRatio, 2),
         uPlanetColor,
         uStars,
      },
   });

   canvas.classList.add("loaded");

   const { Pane } = await import("tweakpane");

   const pane = new Pane({ title: "Controls", expanded: false });

   addRotationControls(pane, uniforms, canvas);
   addPlanetControls(pane, uniforms, {
      geometry: false,
      terrain: false,
      clouds: false,
   });
   addLightControls(pane, uniforms);
   addMonitor(pane);
</script>

<Layout
   title="Realtime Planet Shader | Moon"
   description="Realtime moon shader in WebGL"
>
   <Canvas />
   <Footer>
      <MainNavigation />
      <Meta>
         <Author />
         <div class="textures">
            Textures from
            <a href="https://www.solarsystemscope.com/textures/">
               Solar System Scope
            </a>
         </div>
      </Meta>
   </Footer>
</Layout>

<style>
   .textures {
      font-size: 0.875em;
      margin-top: 0.8em;
   }
</style>
